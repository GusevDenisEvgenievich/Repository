using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
 
namespace ConsoleApplication11
{
    class Program
    {
        struct Element
        {
            public int Delivery { get; set; }
            public int Value { get; set; }
            public static int FindMinElement(int a, int b)
            {
                if (a > b) return b;
                if (a == b) { return a; }
                else return a;
            }
        }
        
        static void Main(string[] args)
        {
            int i = 0;
            int j = 0;
            int ResultCoast = 0;
            int max=0;
            
            Console.Write("Введите количество поставщиков: ");
            int n = Convert.ToInt32(Console.ReadLine());
            int[] a = new int[n];
            int[] copieda = new int[a.Length];
            Console.Write("Введите количество покупателей: ");
            int m = Convert.ToInt32(Console.ReadLine());
            int[] b = new int[m];
            int[] copiedb = new int[b.Length];
            Element[,] C = new Element[n, m];
            
            for (i = 0; i < a.Length; i++)
            {
                Console.Write($"Введите количество товара поставщика {i+1}: ");
                a[i] = Convert.ToInt32(Console.ReadLine());
            }
            Array.Copy(a, copieda, a.Length);
            
            for (j = 0; j < b.Length; j++)
            {
                Console.Write($"Введите спрос покупателя {j+1}: ");
                b[j] = Convert.ToInt32(Console.ReadLine());
            }
            Array.Copy(b, copiedb, b.Length);
            
            for (i = 0; i < n; i++)
            {
                for (j = 0; j < m; j++)
                {
                    Console.Write($"Введите цену перевозки от продавца {i+1} до покупателя {j+1}: ");
                    C[i, j].Value = Convert.ToInt32(Console.ReadLine());
                }
            }
            
            i = j = 0;
            while (i < n && j < m)
            {
                try
                {
                    if (a[i] == 0) { i++; }
                    if (b[j] == 0) { j++; }
                    if (a[i] == 0 && b[j] == 0) { i++; j++; }
                    C[i, j].Delivery = Element.FindMinElement(a[i], b[j]);
                    a[i] -= C[i, j].Delivery;
                    b[j] -= C[i, j].Delivery;
                }
                catch { }
            }
            
            Console.WriteLine("\nПлан перевозок методом северо-западного угла:");
            i = j = 0;
            for (i = 0; i < n; i++)
            {
                for (j = 0; j < m; j++)
                {
                    Console.Write($"\t{C[i, j].Delivery}");
                }
                Console.Write($"\t{copieda[i]}");
                Console.WriteLine();
            }
            for (int e = 0; e < m; e++)
            {
                Console.Write($"\t{copiedb[e]}");
            }
            
            for (i = 0; i < n; i++)
            {
                for (j = 0; j < m; j++)
                {
                    ResultCoast += (C[i, j].Value * C[i, j].Delivery);
                }
            }
            Console.WriteLine("\nЗатраты на доставку: {0}\n", ResultCoast);
            
            string[] potentialsA = new string[n];
            string[] potentialsB = new string[m];
            for (int q = 0; q < n; q++)
            {
                potentialsA[q] = "";
            }
            for (int w = 0; w < m; w++)
            {
                potentialsB[w] = "";
            }
            
            for (int w = 0; w < n; w++)
            {
                for (int e = 0; e < m; e++)
                {
                    if (C[w, e].Delivery != 0)
                    {
                        if (potentialsA[w] == "")
                        {
                            if (w == 0 && e == 0)
                            {
                                potentialsA[w] = "0";
                                potentialsB[e] = (C[w, e].Value - int.Parse(potentialsA[w])).ToString();
                            }
                            else
                            {
                                potentialsA[w] = (C[w, e].Value - int.Parse(potentialsB[e])).ToString();
                            }
                        }
                        if (potentialsB[e] == "")
                        {
                            potentialsB[e] = (C[w, e].Value - int.Parse(potentialsA[w])).ToString();
                        }
                    }
                }
            }
            
            Console.WriteLine("Опорный план:");
            Console.Write($"\t\t");
            for (int e = 0; e < m; e++)
            {
                Console.Write($"{potentialsB[e]}\t");
            }
            Console.WriteLine();
            for (int w = 0; w < n; w++)
            {
                Console.Write($"\t{potentialsA[w]}");
                for (int e = 0; e < m; e++)
                {
                    Console.Write($"\t{C[w, e].Delivery}");
                }
                Console.Write($"\t{copieda[w]}");
                Console.WriteLine();
            }
            Console.Write($"\t\t");
            for (int e = 0; e < m; e++)
            {
                Console.Write($"{copiedb[e]}\t");
            }
            Console.WriteLine();
            
            int[,] freecells = new int[n,m];
            for (int w = 0; w < n; w++)
            {
                for (int e = 0; e < m; e++)
                {
                    if (C[w, e].Delivery == 0)
                    {
                        freecells[w,e] = int.Parse(potentialsA[w]) + int.Parse(potentialsB[e]) - C[w, e].Value;
                    }
                }
            }
            
            Console.WriteLine("\nОценка свободных клеток");
            Console.Write($"\t\t");
            for (int e = 0; e < m; e++)
            {
                Console.Write($"{potentialsB[e]}\t");
            }
            Console.WriteLine();
            for (int w = 0; w < n; w++)
            {
                Console.Write($"\t{potentialsA[w]}");
                for (int e = 0; e < m; e++)
                {
                    Console.Write($"\t{freecells[w,e]}");
                }
                Console.Write($"\t{copieda[w]}");
                Console.WriteLine();
            }
            Console.Write($"\t\t");
            for (int e = 0; e < m; e++)
            {
                Console.Write($"{copiedb[e]}\t");
            }
            Console.WriteLine();
            
            foreach (int cell in freecells) 
            {
                if (cell > max) max = cell;
            }
            Console.WriteLine($"\nНаибольшая оценка {max}");
        }
    }
}