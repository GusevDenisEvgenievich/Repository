using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
 
namespace ConsoleApplication11
{
    class Program
    {
        struct Element
        {
            public int Delivery { get; set; }
            public int Value { get; set; }
            public static int FindMinElement(int a, int b)
            {
                if (a > b) return b;
                if (a == b) { return a; }
                else return a;
            }
        }
 
        static void Main(string[] args)
        {
            int i = 0;
            int j = 0;
            int n;
            Console.Write("Введите количество поставщиков: ");
            n = Convert.ToInt32(Console.ReadLine());
            int[] a = new int[n];
            Console.Write("Введите количество покупателей: ");
            int m = Convert.ToInt32(Console.ReadLine());
            int[] b = new int[m];
            Element[,] C = new Element[n, m];
            for (i = 0; i < a.Length; i++)
            {
                Console.Write($"Введите количество товара поставщика {i+1}: ");
                a[i] = Convert.ToInt32(Console.ReadLine());
            }
            for (j = 0; j < b.Length; j++)
            {
                Console.Write($"Введите спрос покупателя {j+1}: ");
                b[j] = Convert.ToInt32(Console.ReadLine());
            }
            for (i = 0; i < n; i++)
            {
                for (j = 0; j < m; j++)
                {
                    Console.Write($"Введите цену перевозки от продавца {i} до покупателя {j}: ");
                    C[i, j].Value = Convert.ToInt32(Console.ReadLine());
                }
            }
            
            i = j = 0;
            while (i < n && j < m)
            {
                try
                {
                    if (a[i] == 0) { i++; }
                    if (b[j] == 0) { j++; }
                    if (a[i] == 0 && b[j] == 0) { i++; j++; }
                    C[i, j].Delivery = Element.FindMinElement(a[i], b[j]);
                    a[i] -= C[i, j].Delivery;
                    b[j] -= C[i, j].Delivery;
                }
                catch { }
            }
            
            Console.WriteLine("\nПлан перевозок методом северо-западного угла:");
            i = j = 0;
            for (i = 0; i < n; i++)
            {
                for (j = 0; j < m; j++)
                {
                    Console.Write($"\t{C[i, j].Delivery}");
                }
                Console.WriteLine();
            }
            /*
            for (i = 0; i < n; i++)
            {
                for (j = 0; j < m; j++)
                {
                    if (C[i, j].Delivery != 0)
                    {
                        Console.ForegroundColor = ConsoleColor.Blue;
                        Console.Write("{0}", C[i, j].Value);
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.Write("({0})", C[i, j].Delivery); 
                        Console.ResetColor();
                    }
                    else
                        Console.Write("{0}({1})", C[i, j].Value, C[i, j].Delivery);
                }
                Console.WriteLine();
            }
            */
            int ResultCoast = 0;
            for (i = 0; i < n; i++)
            {
                for (j = 0; j < m; j++)
                {
                    ResultCoast += (C[i, j].Value * C[i, j].Delivery);
                }
            }
            Console.WriteLine("Затраты на доставку: {0}", ResultCoast);
            
            
            
            
            double[] potentialsA = new double[n];
            double[] potentialsB = new double[m];
            bool optimal = false;
            // Инициализация потенциалов
            for (int i = 0; i < n; i++)
            {
                potentialsA[i] = 0;
            }
            for (int j = 0; j < m; j++)
            {
                potentialsB[j] = 0;
            }
            while (!optimal)
            {
                optimal = true;
                // Расчет потенциалов
                for (int i = 0; i < n; i++)
                {
                    for (int j = 0; j < m; j++)
                    {
                        if (C[i, j].Delivery != 0)
                        {
                            if (potentialsA[i] == 0)
                            {
                                potentialsA[i] = C[i, j].Value - potentialsB[j];
                            }
                            else
                            {
                                potentialsB[j] = C[i, j].Value - potentialsA[i];
                            }
                        }
                    }
                }
                // Проверка условий оптимальности
                for (int i = 0; i < n; i++)
                {
                    for (int j = 0; j < m; j++)
                    {
                        if (C[i, j].Delivery == 0)
                        {
                            if (potentialsA[i] + potentialsB[j] - C[i, j].Value > 0)
                            {
                                optimal = false;
                                // Найти цикл и пересчитать план перевозок
                                // ...
                            }
                        }
                    }
                }
            }
            // Вывод результатов
            Console.WriteLine("Затраты на доставку после оптимизации методом потенциалов: {0}", ResultCoast);
        }
    }
}